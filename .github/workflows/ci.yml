name: CI

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  lint:
    name: Lint Dockerfile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ghcr.io/netresearch/docker-ftp-server:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: ghcr.io/netresearch/docker-ftp-server:test
          cache-from: type=gha

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ghcr.io/netresearch/docker-ftp-server:test
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  test:
    name: Test FTP Server
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and start FTP server
        run: |
          docker compose up -d

      - name: Wait for FTP server to be ready
        run: |
          echo "Waiting for FTP server to start..."
          for i in {1..30}; do
            if docker compose ps | grep -q "Up"; then
              sleep 2  # Give it a couple more seconds to fully initialize
              if docker compose exec -T ftp ps aux | grep -q vsftpd; then
                echo "FTP server is ready"
                exit 0
              fi
            fi
            echo "Waiting... attempt $i/30"
            sleep 1
          done
          echo "FTP server failed to start in time"
          docker compose logs
          exit 1

      - name: Check if FTP server is running
        run: |
          docker compose ps
          docker compose logs

      - name: Test FTP connection
        run: |
          # Test if port 21 is listening using bash built-in
          for i in {1..10}; do
            if timeout 2 bash -c 'cat < /dev/null > /dev/tcp/localhost/21' 2>/dev/null; then
              echo "FTP server is listening on port 21"
              exit 0
            fi
            echo "Attempt $i/10: FTP port not ready yet"
            sleep 1
          done
          echo "FTP port not available after 10 attempts"
          exit 1

      - name: Cleanup
        if: always()
        run: docker compose down -v
